package nayttelyrekisteri.test;
// Generated by ComTest BEGIN
import nayttelyrekisteri.*;
import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.26 14:47:12 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KissatTest {



  // Generated by ComTest BEGIN
  /** testLisaa35 */
  @Test
  public void testLisaa35() {    // Kissat: 35
    Kissat kissat = new Kissat(); 
    Kissa kissa1 = new Kissa(), kissa2 = new Kissa(); 
    assertEquals("From: Kissat line: 38", 0, kissat.getLkm()); 
    kissat.lisaa(kissa1); assertEquals("From: Kissat line: 39", 1, kissat.getLkm()); 
    kissat.lisaa(kissa2); assertEquals("From: Kissat line: 40", 2, kissat.getLkm()); 
    kissat.lisaa(kissa1); assertEquals("From: Kissat line: 41", 3, kissat.getLkm()); 
    assertEquals("From: Kissat line: 42", kissa1, kissat.anna(0)); 
    assertEquals("From: Kissat line: 43", kissa2, kissat.anna(1)); 
    assertEquals("From: Kissat line: 44", kissa1, kissat.anna(2)); 
    assertEquals("From: Kissat line: 45", false, kissat.anna(1) == kissa1); 
    assertEquals("From: Kissat line: 46", true, kissat.anna(1) == kissa2); 
    try {
    assertEquals("From: Kissat line: 47", kissa1, kissat.anna(3)); 
    fail("Kissat: 47 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    kissat.lisaa(kissa1); assertEquals("From: Kissat line: 48", 4, kissat.getLkm()); 
    kissat.lisaa(kissa1); assertEquals("From: Kissat line: 49", 5, kissat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa66 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa66() throws SailoException,CloneNotSupportedException {    // Kissat: 66
    Kissat kissat = new Kissat(); 
    Kissa kissa1 = new Kissa(), kissa2 = new Kissa(); 
    kissa1.rekisteroi(); kissa2.rekisteroi(); 
    assertEquals("From: Kissat line: 72", 0, kissat.getLkm()); 
    kissat.korvaaTaiLisaa(kissa1); assertEquals("From: Kissat line: 73", 1, kissat.getLkm()); 
    kissat.korvaaTaiLisaa(kissa2); assertEquals("From: Kissat line: 74", 2, kissat.getLkm()); 
    Kissa kissa3 = kissa1.clone(); 
    kissat.korvaaTaiLisaa(kissa3); assertEquals("From: Kissat line: 76", 2, kissat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta109 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta109() throws SailoException {    // Kissat: 109
    Kissat kissat = new Kissat(); 
    Kissa kissa1 = new Kissa(), kissa2 = new Kissa(); 
    kissa1.alustaKissa(); 
    kissa2.alustaKissa(); 
    String tiedNimi = "testikissat"; 
    File ftied = new File(tiedNimi+"/kissat.dat"); 
    ftied.delete(); 
    try {
    kissat.lueTiedostosta(tiedNimi); 
    fail("Kissat: 120 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kissat.lisaa(kissa1); 
    kissat.lisaa(kissa2); 
    kissat.tallenna("testikissat"); 
    kissat = new Kissat(); 
    kissat.lueTiedostosta(tiedNimi); 
    kissat.lisaa(kissa2); 
    kissat.tallenna("testikissat"); 
    assertEquals("From: Kissat line: 128", true, ftied.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi187 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi187() throws SailoException {    // Kissat: 187
    Kissat kissat = new Kissat(); 
    Kissa kissa1 = new Kissa(); kissa1.parse("1|Electric India|FI*Siniidan|Tofu|"); 
    Kissa kissa2 = new Kissa(); kissa2.parse("2|Black Halo|FI*Siniidan|Doris|"); 
    Kissa kissa3 = new Kissa(); kissa3.parse("3|Sisu||Sisu|"); 
    kissat.lisaa(kissa1); kissat.lisaa(kissa2); kissat.lisaa(kissa3); 
    List<Kissa> loytyneet; 
    loytyneet = (List<Kissa>)kissat.etsi("*s*",1); 
    assertEquals("From: Kissat line: 198", 2, loytyneet.size()); 
    assertEquals("From: Kissat line: 199", true, loytyneet.get(0) == kissa1); 
    assertEquals("From: Kissat line: 200", false, loytyneet.get(1) == kissa1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista222 
   * @throws SailoException when error
   */
  @Test
  public void testPoista222() throws SailoException {    // Kissat: 222
    Kissat kissat = new Kissat(); 
    Kissa kissa1 = new Kissa(), kissa2 = new Kissa(), kissa3 = new Kissa(); 
    kissa1.rekisteroi(); kissa2.rekisteroi(); kissa3.rekisteroi(); 
    int id1 = kissa1.getTunnusNro(); 
    kissat.lisaa(kissa1); kissat.lisaa(kissa2); kissat.lisaa(kissa3); 
    assertEquals("From: Kissat line: 229", 1, kissat.poista(id1+1)); 
    assertEquals("From: Kissat line: 230", 2, kissat.getLkm()); 
    assertEquals("From: Kissat line: 231", 1, kissat.poista(id1)); assertEquals("From: Kissat line: 231", 1, kissat.getLkm()); 
    assertEquals("From: Kissat line: 232", 0, kissat.poista(id1+3)); assertEquals("From: Kissat line: 232", 1, kissat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaId251 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaId251() throws SailoException {    // Kissat: 251
    Kissat kissat = new Kissat(); 
    Kissa kissa1 = new Kissa(), kissa2 = new Kissa(), kissa3 = new Kissa(); 
    kissa1.rekisteroi(); kissa2.rekisteroi(); kissa3.rekisteroi(); 
    int id1 = kissa1.getTunnusNro(); 
    kissat.lisaa(kissa1); kissat.lisaa(kissa2); kissat.lisaa(kissa3); 
    assertEquals("From: Kissat line: 258", true, kissat.annaId(id1  ) == kissa1); 
    assertEquals("From: Kissat line: 259", true, kissat.annaId(id1+1) == kissa2); 
    assertEquals("From: Kissat line: 260", true, kissat.annaId(id1+2) == kissa3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId275 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId275() throws SailoException {    // Kissat: 275
    Kissat kissat = new Kissat(); 
    Kissa kissa1 = new Kissa(), kissa2 = new Kissa(), kissa3 = new Kissa(); 
    kissa1.rekisteroi(); kissa2.rekisteroi(); kissa3.rekisteroi(); 
    int id1 = kissa1.getTunnusNro(); 
    kissat.lisaa(kissa1); kissat.lisaa(kissa2); kissat.lisaa(kissa3); 
    assertEquals("From: Kissat line: 282", 1, kissat.etsiId(id1+1)); 
    assertEquals("From: Kissat line: 283", 2, kissat.etsiId(id1+2)); 
  } // Generated by ComTest END
}